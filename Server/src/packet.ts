/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.9
 * source: packet.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace tankio {
    export enum MSGID {
        CMOVE = 0,
        SMOVE = 1
    }
    export class CMove extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            playerId?: number;
            x?: number;
            y?: number;
        }): CMove {
            const message = new CMove({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                x?: number;
                y?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.x != 0)
                writer.writeFloat(2, this.x);
            if (this.y != 0)
                writer.writeFloat(3, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CMove {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CMove();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.x = reader.readFloat();
                        break;
                    case 3:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CMove {
            return CMove.deserialize(bytes);
        }
    }
    export class Smove extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            playerId?: number;
            x?: number;
            y?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("playerId" in data && data.playerId != undefined) {
                    this.playerId = data.playerId;
                }
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
            }
        }
        get playerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set playerId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            playerId?: number;
            x?: number;
            y?: number;
        }): Smove {
            const message = new Smove({});
            if (data.playerId != null) {
                message.playerId = data.playerId;
            }
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            return message;
        }
        toObject() {
            const data: {
                playerId?: number;
                x?: number;
                y?: number;
            } = {};
            if (this.playerId != null) {
                data.playerId = this.playerId;
            }
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.playerId != 0)
                writer.writeInt32(1, this.playerId);
            if (this.x != 0)
                writer.writeFloat(2, this.x);
            if (this.y != 0)
                writer.writeFloat(3, this.y);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Smove {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Smove();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.playerId = reader.readInt32();
                        break;
                    case 2:
                        message.x = reader.readFloat();
                        break;
                    case 3:
                        message.y = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Smove {
            return Smove.deserialize(bytes);
        }
    }
}
